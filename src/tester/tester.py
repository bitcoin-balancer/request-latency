from typing import Callable
from time import time, sleep
from tqdm import tqdm

class Tester:
  """Tester Class

  This class is in charge of performing the latency tests for the chosen exchange.

  Class Properties:
    Configuration:
      REQUEST_FREQUENCY: int
        The frequency of the requests in seconds.
      REQUEST_COUNT: int
        The number of requests to be made for both, private and public endpoints.

  Instance Properties:
    Credentials:
      api_key: str
      api_secret: str
        The credentials generated by the exchange.
    Test Payload:
      public_reqs: float[]
      public_req_errors: int
      private_reqs: float[]
      private_req_errors: int
    Results:
      ...
  """
  # configuration
  REQUEST_FREQUENCY = 2
  REQUEST_COUNT = 15

  def __init__(self, api_key: str, api_secret: str):
    self.api_key = api_key
    self.api_secret = api_secret
    self.public_reqs = []
    self.public_req_errors = 0
    self.private_reqs = []
    self.private_req_errors = 0
    

  def __delay() -> None:
    """Invokes a delay that should be used between requests.
    """
    sleep(Tester.REQUEST_FREQUENCY)



  def __run_request(req: Callable[[], None]) -> float:
    """Runs a given request and returns the time it took to complete.
    
    Args:
      req: Callable[[], None]
        The request to be executed.

    Returns:
      The number of seconds it took to execute.
    """
    start = time()
    req()
    return time() - start



  def run(self) -> None:
    """Runs the latency test for the chosen exchange and stores the results.
    """
    # init the progress bar
    pbar = tqdm(total=Tester.REQUEST_COUNT * 2)
    
    # test the public requests
    for i in range(Tester.REQUEST_COUNT):
      self.public_reqs.append(self.__run_request(self.__public_request))
      self.__delay()
      pbar.update(1)

    